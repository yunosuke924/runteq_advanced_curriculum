continue
admin_favicon_path(@site.favicon.id)
admin_favicon_path(@site.favicon)
continue
@site.favicon.id
@site.favicon
continue
params
params[:id]
continue
@site.main_images.map(&:id)
@site.main_images.all
@site.main_images.first
@site.main_images
continue
@site.main_images.all.map(&:id)
@site.main_images.all
@site.main_images
main_image
continue
@site.main_images
exit
continue
@site.main_images
continue
@site.main_images.find(params[:id])
continue
self.blockable
ActiveDecorator::Decorator.instance.decorate(blockable)
embed.youtube?
embed?
exit
embed.identifier
embed
continue
embed.identifier
embed.embed_type
continue
embed.embed_type
continue
embed.embed_type
article_block.embed?
article_block.medium?
continue
ActiveDecorator::Decorator.instance.decorate(article_block.blockable)
article_block.blockable
continue
@article.body
@article.build_body(self)
@article_block.medium?
@article_block.blockable.update(blockable_params)
blockable_params
continue
article
continue
article
continue
article
continue
article
choose '右寄せ'
continue
article_params
continue
article_params
continue
exit
continue
Sentence.where('body LIK ?', "%#{word}%"
Sentence.where('body LIKE ?', "%#{word}%"
continue
Sentence.where('body LIKE ?', "%#{word}"
continue
word
body.split(nil)
body.present?
Article.distinct
body
continue
@search_articles_form.search
SearchArticlesForm.new(search_params)
search_params
continue
params
relation
continue
Sentence.all
Sentece.all
sentence.article_by
sentence
sentence.body
sentence
sentence = article.sentences
article.sentences.body
article.sentences
article.sentences.body
article.sentences
article.body
article
sentence_body.class
sentence_body.class?
sentence_body
article.sentences
article.sentences << create(:sentence, body: evaluator.sentence_body)
create(:sentence, body: evaluator.sentence_body)
evaluator
evalietor
article.sentences
article
continue
@article.build_body(self)
@article.build_body(controller)
@article.build_body(self)
controller
contoroller
self
@article.build_body(self)
@article
continue
article_params
continue
tag.article_tags.map { |x| x.article }
tag.article_tags
relation
continue
relation
tag.article_tags.map { |article_tag| relation = article_tag.article }
tag.article_tags.map { |article_tag| article_tag.article }
tag.article_tags
tag
tag.article_tags
body_words
relation
continue
Aricle.all
Article_tag.class
Article_tag.all
Article_tag.find(1)
tags = Article_tag.find(1)
tags = Article_tag.find_by(tag_id: 2)
tags = Article_tag.find(tag_id: 2)
tags = Article_tags.find(tag_id: 2)
articles = Article.article_tags.where(tag_id: 2)
articles = Article.article_tags(tag_id: 2)
articles = Article.article_tag(tag_id: 2)
Article.article_tags
article_tag.articles.by_tag(tag_id)
article_tag.articles..by_tag(tag_id)
relation.article_tag.by_tag(tag_id)
relation.article_tags.by_tag(tag_id)
relation.by_tag(tag_id)
tag_id
relation
continue
self.state
@article
continue
@article.assign_attributes(article_params)
article_params
continue
@article.state == "draft"
@article.state
params
@article.state == :draft
continue
@article.state == :draft
@article.state = :draft
continue
@article.body
continue
@article.valid?
@article
